#BlueJ class context
comment0.target=AdjListsWeightedGraph
comment0.text=\r\n\ implementation\ of\ the\ Graph\ ADT\r\n\ an\ adaptation\ of\ the\ AdjListsGraph<T>\ Class\ that\ creates\ a\ graph\ with\ weights\ and\ \r\n\ include\ method\ that\ could\ allow\ us\ to\ find\ a\ path\ from\ the\ start\ vertex\ to\ a\ destination\r\n\ \r\n\ @Destiny\ Zhu,\ Melory\ So,\ Coco\ Kneer\r\n\ @05/14/2018\r\n
comment1.params=
comment1.target=AdjListsWeightedGraph()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ AdjListsGraph\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ graph.\r\n\r\n\ @param\ \ no\r\n\ @return\ String\ --\ the\ string\ representation\ of\ the\ graph\r\n
comment11.params=vertex\ target
comment11.target=java.util.LinkedList\ getPath(java.lang.Object,\ java.lang.Object)
comment11.text=\r\n\ Get\ a\ path\ between\ two\ vertices\r\n\r\n\ @param\ \ T\ vertex,\ T\ target\r\n\ @return\ LinkedList<T>\ --\ the\ path\r\n
comment12.params=vertex\ target
comment12.target=javafoundations.LinkedStack\ getPathStack(java.lang.Object,\ java.lang.Object)
comment12.text=\r\n\ Helper.\ Returns\ a\ stack\ representation\ of\ the\ path\r\n\r\n\ @param\ \ T\ vertex,\ T\ target\r\n\ @return\ LinkedStack<T>\ --\ a\ stack\ representation\ of\ the\ path\r\n
comment13.params=vertex1\ vertex2
comment13.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment13.text=\r\n\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ addition.\r\n
comment14.params=source\ destination
comment14.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment14.text=\r\n\ Inserts\ an\ arc\ from\ v1\ to\ v2.\r\n\ If\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \r\n
comment15.params=index1\ index2
comment15.target=void\ addArc(int,\ int)
comment16.params=
comment16.target=boolean\ isEmpty()
comment16.text=\r\n\ Return\ true\ if\ the\ graph\ has\ no\ vertex\ (is\ empty)\r\n\r\n\ @param\ \ none\r\n\ @return\ true\ if\ the\ graph\ is\ empty\r\n
comment17.params=
comment17.target=int\ getNumVertices()
comment17.text=\r\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph.\r\n
comment18.params=
comment18.target=int\ getNumArcs()
comment18.text=\r\n\ Returns\ the\ number\ of\ arcs\ in\ the\ graph\ by\ counting\ them.\r\n
comment19.params=vertex
comment19.target=boolean\ containsVertex(java.lang.Object)
comment19.text=Returns\ true\ if\ this\ graph\ contains\ the\ vertex,\ false\ otherwise.
comment2.params=index
comment2.target=java.lang.Object\ getVertex(int)
comment20.params=vertex1\ vertex2
comment20.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment20.text=\r\n\ Returns\ true\ iff\ a\ directed\ edge\ exists\ from\ v1\ to\ v2.\r\n
comment21.params=vertex1\ vertex2
comment21.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment21.text=\r\n\ \ \ \ Returns\ true\ iff\ an\ edge\ exists\ between\ two\ given\ vertices\r\n\ \ \ \ which\ means\ that\ two\ corresponding\ arcs\ exist\ in\ the\ graph\r\n
comment22.params=
comment22.target=boolean\ isUndirected()
comment22.text=\r\n\ Returns\ true\ IFF\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\ \r\n\ \ \ \ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\r\n\ \ \ \ is\ also\ present\ in\ the\ graph.\ \ \r\n\ An\ empty\ graph\ is\ undirected\ \#\#\#\#is\ that\ all\ right?????\r\n
comment23.params=file
comment23.target=void\ saveToTGF(java.lang.String)
comment23.text=\r\n\ Saves\ the\ current\ graph\ into\ a\ .tgf\ file.\r\n\ If\ it\ cannot\ save\ the\ file,\ a\ message\ is\ printed.\ \r\n
comment24.params=vertex
comment24.target=void\ addVertex(java.lang.Object)
comment25.params=f
comment25.target=AdjListsWeightedGraph\ AdjListsGraphFromFile(java.lang.String)
comment26.params=vertex1\ vertex2
comment26.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment26.text=\r\n\ Removes\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ removal.\r\n
comment27.params=vertex1\ vertex2
comment27.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment27.text=\r\n\ Removes\ an\ arc\ from\ vertex\ v1\ to\ vertex\ v2,\r\n\ if\ the\ vertices\ exist,\ else\ does\ not\ change\ the\ graph.\ \r\n
comment28.params=v
comment28.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment29.params=v
comment29.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment3.params=
comment3.target=java.util.Vector\ getVertices()
comment30.params=args
comment30.target=void\ main(java.lang.String[])
comment4.params=n1\ n2\ weight
comment4.target=void\ addArc(int,\ int,\ int)
comment4.text=\r\n\ Helper\ method.Inserts\ an\ arc\ with\ its\ weight\ between\ two\ vertices\ of\ the\ graph.\r\n\ If\ arc\ already\ exists,\ ignores\ the\ addition.\r\n\r\n\ @param\ \ int\ n1,\ int\ n2,\ int\ weight\r\n\ @return\ no\ return\r\n
comment5.params=v1\ v2\ weight
comment5.target=void\ addArc(java.lang.Object,\ java.lang.Object,\ int)
comment5.text=\r\n\ Inserts\ an\ arc\ with\ its\ weight\ between\ two\ vertices\ of\ the\ graph.\r\n\r\n\ @param\ \ T\ v1,\ T\ v2,\ int\ weight\r\n\ @return\ no\ return\r\n
comment6.params=vertex1\ vertex2\ weight
comment6.target=void\ addEdge(java.lang.Object,\ java.lang.Object,\ int)
comment6.text=\r\n\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\ If\ one\ or\ both\ vertices\ do\ not\ exist,\ ignores\ the\ addition.\r\n\r\n\ @param\ \ T\ vertex1,\ T\ vertex2,\ int\ weight\r\n\ @return\ no\r\n
comment7.params=v
comment7.target=void\ removeVertex(java.lang.Object)
comment7.text=\r\n\ Remove\ a\ vertex\ from\ the\ graph.\ Ignores\ the\ removal\ if\ the\ vertex\ does\ not\ exist.\r\n\r\n\ @param\ \ T\ v\ --\ the\ vertex\ to\ be\ removed\r\n\ @return\ no\ return\r\n
comment8.params=index1\ index2
comment8.target=void\ removeArc(int,\ int)
comment8.text=\r\n\ Remove\ an\ arc\ and\ its\ weight\ from\ the\ graph.\ Ignores\ the\ removal\ if\ the\ index\ is\ not\ valid.\r\n\r\n\ @param\ \ int\ index1,\ int\ index2\r\n\ @return\ no\ return\r\n
comment9.params=start\ destination
comment9.target=int\ getWeight(java.lang.Object,\ java.lang.Object)
comment9.text=\r\n\ Get\ the\ weight\ of\ an\ arc.\ Return\ a\ invalid\ maximum\ integer\ value\ if\ there\ is\ no\ arc\ exist\r\n\ between\ two\ vertices\r\n\r\n\ @param\ \ T\ start,\ T\ destination\r\n\ @return\ int\ weight\r\n
numComments=31
